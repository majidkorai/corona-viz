{"version":3,"sources":["utils.js","MapView.js","App.js","serviceWorker.js","index.js"],"names":["generateSeries","mapData","countries","map","country","locations","filter","l","country_code","code","totalCases","length","reduce","a","b","Number","latest","data","getMapTitle","category","MapView","options","chart","width","height","title","format","legend","align","App","TuiChart","registerTheme","series","startColor","endColor","overColor","useState","confirmedData","setConfirmed","deathsData","setDeaths","recoveredData","setRecovered","useEffect","axios","result","console","log","confirmed","deaths","recovered","fetchData","style","margin","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"miIAAO,SAASA,EAAeC,EAASC,GACtC,OAAOA,EAAUC,KAAI,SAAAC,GACnB,IAAMC,EAAYJ,EAAQK,QAAO,SAAAC,GAAC,OAAIA,EAAEC,eAAiBJ,EAAQK,QAC7DC,EAAa,EASjB,OARIL,EAAUM,SACZD,EAAaL,EAAUO,QAAO,SAACC,EAAGC,GAChC,OAAOD,EAAIE,OAAOD,EAAEE,UACnB,IACQ,CACXP,KAAML,EAAQK,KACdQ,KAAMP,MAML,SAASQ,EAAYC,GAC1B,OAAQA,GACN,IAAK,YACH,MAAO,wBACT,IAAK,SACH,MAAO,SACT,IAAK,YACH,MAAO,kBACT,IAAK,SACH,MAAO,eACT,QACE,MAAO,gC,YCPEC,MAhBf,YAAsC,IAAnBD,EAAkB,EAAlBA,SAAUF,EAAQ,EAARA,KACrBI,EAAU,CACdC,MAAO,CACLC,MAAO,KACPC,OAAQ,IACRC,MAAOP,EAAYC,GACnBO,OAAQ,SAEVvB,IAAK,QACLwB,OAAQ,CACNC,MAAO,WAGX,OAAO,kBAAC,WAAD,CAAUX,KAAMA,EAAMI,QAASA,K,4DC2CzBQ,MAlDf,WAQEC,IAASC,cAAc,QAPT,CACZC,OAAQ,CACNC,WAAY,UACZC,SAAU,UACVC,UAAW,aALF,MASyBC,mBAAS,CAC7CnB,KAAM,CAAEe,OAAQ9B,EAAUe,QAVf,mBASNoB,EATM,KASSC,EATT,OAYmBF,mBAAS,CACvCnB,KAAM,CAAEe,OAAQ9B,EAAUe,QAbf,mBAYNsB,EAZM,KAYMC,EAZN,OAeyBJ,mBAAS,CAC7CnB,KAAM,CAAEe,OAAQ9B,EAAUe,QAhBf,mBAeNwB,EAfM,KAeSC,EAfT,KAwCb,OAtBAC,qBAAU,YACO,uCAAG,kCAAA9B,EAAA,sEACK+B,IACnB,qDAFc,OACVC,EADU,OAIhBC,QAAQC,IAAIF,EAAO5B,MACf+B,EAAYhD,EACd6C,EAAO5B,KAAK+B,UAAU3C,UACtBH,GAEFoC,EAAa,CAAErB,KAAM,CAAEe,OAAQgB,KAC3BC,EAASjD,EAAe6C,EAAO5B,KAAKgC,OAAO5C,UAAWH,GAC1DsC,EAAU,CAAEvB,KAAM,CAAEe,OAAQiB,KACxBC,EAAYlD,EAAe6C,EAAO5B,KAAKiC,UAAU7C,UAAWH,GAChEwC,EAAa,CAAEzB,KAAM,CAAEe,OAAQkB,KAbf,4CAAH,qDAefC,KACC,IAMD,yBAAKC,MALM,CACXC,OAAQ,OACRC,UAAW,WAIT,wEACA,kBAAC,EAAD,CAASrC,KAAMoB,EAAcpB,KAAME,SAAU,cAC7C,kBAAC,EAAD,CAASF,KAAMsB,EAAWtB,KAAME,SAAU,WAC1C,kBAAC,EAAD,CAASF,KAAMwB,EAAcxB,KAAME,SAAU,gBC3C/BoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.a539da55.chunk.js","sourcesContent":["export function generateSeries(mapData, countries) {\n  return countries.map(country => {\n    const locations = mapData.filter(l => l.country_code === country.code);\n    let totalCases = 0;\n    if (locations.length)\n      totalCases = locations.reduce((a, b) => {\n        return a + Number(b.latest);\n      }, 0);\n    const data = {\n      code: country.code,\n      data: totalCases\n    };\n    return data;\n  });\n}\n\nexport function getMapTitle(category) {\n  switch (category) {\n    case \"confirmed\":\n      return \"Total Confirmed Cases\";\n    case \"latest\":\n      return \"Latest\";\n    case \"recovered\":\n      return \"Total Recovered\";\n    case \"deaths\":\n      return \"Total Deaths\";\n    default:\n      return \"Corona virus confirmed cases\";\n  }\n}\n","import React from \"react\";\nimport { getMapTitle } from \"./utils\";\nimport { MapChart } from \"@toast-ui/react-chart\";\n\nfunction MapView({ category, data }) {\n  const options = {\n    chart: {\n      width: 1100,\n      height: 700,\n      title: getMapTitle(category),\n      format: \"1,000\"\n    },\n    map: \"world\",\n    legend: {\n      align: \"bottom\"\n    }\n  };\n  return <MapChart data={data} options={options} />;\n}\n\nexport default MapView;\n","import React, { useEffect, useState } from \"react\";\nimport MapView from \"./MapView\";\nimport axios from \"axios\";\nimport { default as countries } from \"./countries.json\";\nimport \"tui-chart/dist/tui-chart.css\";\nimport \"tui-chart/dist/maps/world\";\nimport \"./App.css\";\nimport TuiChart from \"tui-chart\";\nimport { generateSeries } from \"./utils\";\n\nfunction App() {\n  const theme = {\n    series: {\n      startColor: \"#ffefef\",\n      endColor: \"#ac4142\",\n      overColor: \"#75b5aa\"\n    }\n  };\n  TuiChart.registerTheme(\"theme\", theme);\n  const [confirmedData, setConfirmed] = useState({\n    data: { series: countries.data }\n  });\n  const [deathsData, setDeaths] = useState({\n    data: { series: countries.data }\n  });\n  const [recoveredData, setRecovered] = useState({\n    data: { series: countries.data }\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        \"https://coronavirus-tracker-api.herokuapp.com/all\"\n      );\n      console.log(result.data);\n      let confirmed = generateSeries(\n        result.data.confirmed.locations,\n        countries\n      );\n      setConfirmed({ data: { series: confirmed } });\n      let deaths = generateSeries(result.data.deaths.locations, countries);\n      setDeaths({ data: { series: deaths } });\n      let recovered = generateSeries(result.data.recovered.locations, countries);\n      setRecovered({ data: { series: recovered } });\n    };\n    fetchData();\n  }, []);\n  let styles = {\n    margin: \"10px\",\n    textAlign: \"center\"\n  };\n  return (\n    <div style={styles}>\n      <h1>Coronavirus (COVID-19) Global Statistics</h1>\n      <MapView data={confirmedData.data} category={\"confirmed\"}></MapView>\n      <MapView data={deathsData.data} category={\"deaths\"}></MapView>\n      <MapView data={recoveredData.data} category={\"recovered\"}></MapView>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}