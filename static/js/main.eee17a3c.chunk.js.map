{"version":3,"sources":["utils.js","MapView.js","components/WorldwideCases.js","components/MapView.js","components/PieChart.js","components/Overview.js","App.js","serviceWorker.js","index.js"],"names":["formatWorldWideCasesChartData","data","chartData","getGroupedData","sort","a","b","confirmed","transformedData","slice","map","c","country","deaths","recovered","formatOverViewData","latest","formatPieChartData","formatMapViewData","getCount","groupedData","countryCode","countryData","get","reduce","Number","groupedConfirmed","groupBy","locations","l","country_code","groupedDeaths","groupedRecovered","forEach","v","k","push","list","keyGetter","Map","item","key","collection","set","MapView","WorldWideCases","height","width","chartType","loader","options","title","chartArea","hAxis","minValue","vAxis","colorAxis","colors","mapsApiKey","PieChartView","legend","position","pieSliceText","sliceVisibilityThreshold","rootProps","OverView","App","useState","allData","setAllData","isFetching","setIsFetching","useEffect","axios","result","fetchData","override","css","style","margin","textAlign","display","justifyContent","alignItems","flexDirection","PieChart","className","formatTableViewData","index","toLocaleString","size","color","loading","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eee17a3c.chunk.js","sourcesContent":["export function generateSeries(mapData, countries) {\n  return countries.map(country => {\n    const locations = mapData.filter(l => l.country_code === country.code);\n    let totalCases = 0;\n    if (locations.length)\n      totalCases = locations.reduce((a, b) => {\n        return a + Number(b.latest);\n      }, 0);\n    const data = {\n      code: country.code,\n      data: totalCases\n    };\n    return data;\n  });\n}\n\nexport function getMapTitle(category) {\n  switch (category) {\n    case \"confirmed\":\n      return \"Total Confirmed Cases\";\n    case \"latest\":\n      return \"Latest\";\n    case \"recovered\":\n      return \"Total Recovered\";\n    case \"deaths\":\n      return \"Total Deaths\";\n    default:\n      return \"Corona virus confirmed cases\";\n  }\n}\n\nexport function formatWorldWideCasesChartData(data) {\n  let chartData = getGroupedData(data);\n  chartData.sort(function(a, b) {\n    return b.confirmed - a.confirmed;\n  });\n  let transformedData = chartData.slice(0, 5).map(c => {\n    return [c.country, c.confirmed, c.deaths, c.recovered];\n  });\n  return [\n    [\"Country\", \"Confirmed Cases\", \"Deaths\", \"Recovered\"],\n    ...transformedData\n  ];\n}\n\nexport function formatOverViewData(data) {\n  let transformedData = [\n    [\"Confirmed\", data.latest.confirmed],\n    [\"Deaths\", data.latest.deaths],\n    [\"Recovered\", data.latest.recovered]\n  ];\n  return [[\"Label\", \"Value\"], ...transformedData];\n}\n\nexport function formatPieChartData(data) {\n  let chartData = getGroupedData(data);\n  let transformedData = chartData.map(c => {\n    return [c.country, c.confirmed];\n  });\n  return [[\"Country\", \"Cases\"], ...transformedData];\n}\n\nexport function formatTableViewData(data) {\n  let chartData = getGroupedData(data);\n  chartData.sort(function(a, b) {\n    return b.confirmed - a.confirmed;\n  });\n  return chartData;\n}\n\nexport function formatMapViewData(data) {\n  let chartData = getGroupedData(data);\n  chartData.sort(function(a, b) {\n    return b.confirmed - a.confirmed;\n  });\n  let transformedData = chartData.map(c => {\n    return [c.country, c.confirmed];\n  });\n  return [[\"Country\", \"Cases\"], ...transformedData];\n}\n\nfunction getCount(groupedData, countryCode) {\n  // console.log(countryCode, groupedData);\n  const countryData = groupedData.get(countryCode);\n  // console.log(countryCode, countryData);\n  const totalCases = countryData\n    ? countryData.reduce((a, b) => {\n        return a + Number(b.latest);\n      }, 0)\n    : 0;\n  return totalCases;\n}\n\nfunction getGroupedData(data) {\n  let groupedData = [];\n  const groupedConfirmed = groupBy(\n    data.confirmed.locations,\n    l => l.country_code\n  );\n  const groupedDeaths = groupBy(data.deaths.locations, l => l.country_code);\n  const groupedRecovered = groupBy(\n    data.recovered.locations,\n    l => l.country_code\n  );\n  groupedConfirmed.forEach((v, k) => {\n    groupedData.push({\n      country: v[0].country,\n      deaths: getCount(groupedDeaths, k),\n      confirmed: getCount(groupedConfirmed, k),\n      recovered: getCount(groupedRecovered, k)\n    });\n  });\n  return groupedData;\n}\n\nfunction groupBy(list, keyGetter) {\n  const map = new Map();\n  list.forEach(item => {\n    const key = keyGetter(item);\n    const collection = map.get(key);\n    if (!collection) {\n      map.set(key, [item]);\n    } else {\n      collection.push(item);\n    }\n  });\n  return map;\n}\n","import React from \"react\";\nimport { getMapTitle } from \"./utils\";\nimport { MapChart } from \"@toast-ui/react-chart\";\n\nfunction MapView({ category, data }) {\n  const options = {\n    chart: {\n      width: 1100,\n      height: 700,\n      title: getMapTitle(category),\n      format: \"1,000\"\n    },\n    map: \"world\",\n    legend: {\n      align: \"bottom\"\n    }\n  };\n  return <MapChart data={data} options={options} />;\n}\n\nexport default MapView;\n","import React from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport { formatWorldWideCasesChartData } from \"../utils\";\n\nfunction WorldWideCases({ data }) {\n  \n  return (\n    <Chart\n      height={\"450px\"}\n      width={\"90%\"}\n      chartType=\"BarChart\"\n      loader={<div>Loading Chart</div>}\n      data={formatWorldWideCasesChartData(data)}\n      options={{\n        title: \"Top 5 Affected Countries\",\n        chartArea: { width: \"90%\" },\n        hAxis: {\n          title: \"People Affected\",\n          minValue: 0\n        },\n        vAxis: {\n          title: \"Country\"\n        }\n      }}\n    />\n  );\n}\nexport default WorldWideCases;\n","import React from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport { formatMapViewData } from \"../utils\";\nfunction MapView({ data }) {\n  return (\n    <Chart\n      height={\"350px\"}\n      width={\"90%\"}\n      chartType=\"GeoChart\"\n      data={formatMapViewData(data)}\n      options={{\n        chartArea: { width: \"100%\" },\n        colorAxis: { colors: [\"#FFDFA5\", \"#FF0000\"] }\n      }}\n      mapsApiKey=\"AIzaSyAmWei1h0Q6BXMh_4K-22FibghqjqBHWU4\"\n    />\n  );\n}\n\nexport default MapView;\n","import React from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport { formatPieChartData } from \"../utils\";\nfunction PieChartView({ data }) {\n  return (\n    <Chart\n      width={\"90%\"}\n      height={\"300px\"}\n      chartType=\"PieChart\"\n      loader={<div>Loading Chart</div>}\n      data={formatPieChartData(data)}\n      options={{\n        // title: \"Country Wise Total Cases\",\n        legend: { position: 'bottom' },\n        pieSliceText: 'label',\n        sliceVisibilityThreshold: 0.03\n      }}\n      rootProps={{ \"data-testid\": \"1\" }}\n    />\n  );\n}\n\nexport default PieChartView;\n","import React from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport { formatOverViewData } from \"../utils\";\nfunction OverView({ data }) {\n  return (\n    <Chart\n      width={\"90%\"}\n      height={\"300px\"}\n      chartType=\"PieChart\"\n      loader={<div>Loading Chart</div>}\n      data={formatOverViewData(data)}\n      options={{\n        legend: { position: 'bottom' },\n        chartArea: {\n          width: '100%'\n        },\n        pieSliceText: \"percentage\",\n      }}\n      rootProps={{ \"data-testid\": \"1\" }}\n    />\n  );\n}\n\nexport default OverView;\n","import React, { useEffect, useState } from \"react\";\nimport MapView from \"./MapView\";\nimport axios from \"axios\";\nimport { default as countries } from \"./countries.json\";\nimport \"tui-chart/dist/tui-chart.css\";\nimport \"tui-chart/dist/maps/world\";\nimport \"./App.css\";\nimport WorldWideCases from \"./components/WorldwideCases\";\nimport MapViewGoogle from \"./components/MapView\";\nimport PieChartView from \"./components/PieChart\";\nimport OverView from \"./components/Overview\";\nimport { formatTableViewData } from \"./utils\";\nimport { css } from \"@emotion/core\";\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\n\nfunction App() {\n  const [allData, setAllData] = useState([]);\n  const [isFetching, setIsFetching] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsFetching(true);\n      const result = await axios(\n        \"https://coronavirus-tracker-api.herokuapp.com/all\"\n      );\n      setAllData(result.data);\n      setIsFetching(false);\n    };\n    fetchData();\n  }, []);\n  let styles = {\n    margin: \"10px\",\n    textAlign: \"center\"\n  };\n  let flexContainer = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\"\n  };\n  const override = css`\n    display: block;\n    margin: 0 auto;\n    padding-top: 50px;\n    border-color: red;\n  `;\n\n  return (\n    <div style={styles}>\n      <h1>Coronavirus (COVID-19) Global Statistics</h1>\n      {!isFetching && (\n        <div style={flexContainer}>\n          <OverView data={allData}></OverView>\n          <MapViewGoogle data={allData}></MapViewGoogle>\n          <PieChartView data={allData}></PieChartView>\n          <WorldWideCases data={allData}></WorldWideCases>\n          <div className=\"tableView\">\n            <table>\n              <thead>\n                <tr>\n                  <th>Country</th>\n                  <th>Confirmed Cases</th>\n                  <th>Recovered Cases</th>\n                  <th>Deaths</th>\n                </tr>\n              </thead>\n              <tbody>\n                {formatTableViewData(allData).map((c, index) => (\n                  <tr key={index}>\n                    <td>{c.country}</td>\n                    <td>{c.confirmed.toLocaleString()}</td>\n                    <td>{c.recovered.toLocaleString()}</td>\n                    <td>{c.deaths.toLocaleString()}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n      {isFetching && (\n        <ScaleLoader\n          css={override}\n          size={35}\n          color={\"#123abc\"}\n          loading={isFetching}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}